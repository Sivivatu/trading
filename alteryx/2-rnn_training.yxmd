<?xml version="1.0"?>
<AlteryxDocument yxmdVer="2019.2">
  <Nodes>
    <Node ToolID="2">
      <GuiSettings Plugin="AlteryxBasePluginsGui.DbFileInput.DbFileInput">
        <Position x="162" y="150" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Passwords />
          <File OutputFileName="" RecordLimit="" SearchSubDirs="False" FileFormat="0">..\data\1-raw\GE.csv</File>
          <FormatSpecificOptions>
            <CodePage>65001</CodePage>
            <Delimeter>,</Delimeter>
            <IgnoreErrors>False</IgnoreErrors>
            <FieldLen>254</FieldLen>
            <AllowShareWrite>False</AllowShareWrite>
            <HeaderRow>True</HeaderRow>
            <IgnoreQuotes>DoubleQuotes</IgnoreQuotes>
            <ImportLine>1</ImportLine>
          </FormatSpecificOptions>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>GE.csv</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
        <Dependencies>
          <Implicit />
        </Dependencies>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="Date" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Open" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="High" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Low" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Close" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Adj Close" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Volume" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxDbFileInput" />
    </Node>
    <Node ToolID="4">
      <GuiSettings Plugin="AlteryxBasePluginsGui.AlteryxSelect.AlteryxSelect">
        <Position x="270" y="150" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <OrderChanged value="False" />
          <CommaDecimal value="False" />
          <SelectFields>
            <SelectField field="symbol" selected="True" type="String" size="4" />
            <SelectField field="Date" selected="True" type="Date" size="10" />
            <SelectField field="close" selected="True" type="Float" size="4" />
            <SelectField field="high" selected="True" type="Float" size="4" />
            <SelectField field="low" selected="True" type="Float" size="4" />
            <SelectField field="open" selected="True" type="Float" size="4" />
            <SelectField field="volume" selected="True" type="Int32" size="4" />
            <SelectField field="*Unknown" selected="True" />
          </SelectFields>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxSelect" />
    </Node>
    <Node ToolID="1">
      <GuiSettings Plugin="JupyterCode">
        <Position x="450" y="150" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <productionModeScript />
          <Notebook><![CDATA[{"cells":[{"cell_type":"markdown","metadata":{"ayx":{"cell_class":"text_cell","cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","cell_type":"markdown","contents_keyword":"Alteryx.help()","first_line":"Run `Alteryx.help()` for info about useful functions.","label":"info"}},"source":"Run `Alteryx.help()` for info about useful functions.  \ni.e., `Alteryx.read(\"#1\")`, `Alteryx.write(df,1)`, `Alteryx.getWorkflowConstant(\"Engine.WorkflowDirectory\")`"},{"cell_type":"code","execution_count":1,"metadata":{"ayx":{"cell_class":"code_cell","cell_css":"border: 1px solid #58a; margin: 2px;","cell_type":"code","contents_keyword":"installPackages","first_line":"# List all non-standard packages to be imported by your","label":"deps"},"scrolled":true,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: sklearn in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\r\nRequirement already satisfied: keras in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\r\nRequirement already satisfied: tensorflow in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\r\nRequirement already satisfied: protobuf==3.6.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\r\nRequirement already satisfied: scikit-learn in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from sklearn)\r\nRequirement already satisfied: numpy>=1.9.1 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: six>=1.9.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: keras-applications>=1.0.6 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: keras-preprocessing>=1.0.5 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: pyyaml in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: h5py in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: scipy>=0.14 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from keras)\r\nRequirement already satisfied: grpcio>=1.8.6 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: tensorflow-estimator<1.14.0rc0,>=1.13.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: wheel>=0.26 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: astor>=0.6.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: gast>=0.2.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: absl-py>=0.1.6 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: termcolor>=1.1.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: tensorboard<1.14.0,>=1.13.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow)\r\nRequirement already satisfied: setuptools in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from protobuf==3.6.0)\r\nRequirement already satisfied: mock>=2.0.0 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorflow-estimator<1.14.0rc0,>=1.13.0->tensorflow)\r\nRequirement already satisfied: werkzeug>=0.11.15 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow)\r\nRequirement already satisfied: markdown>=2.6.8 in c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow)\r\n"}],"source":"# List all non-standard packages to be imported by your \n# script here (only missing packages will be installed)\nfrom ayx import Package\n#Package.installPackages(['pandas','numpy']\nPackage.installPackages(['sklearn', 'keras', 'tensorflow', 'protobuf==3.6.0'])"},{"cell_type":"code","execution_count":2,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Python version: 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 11:57:41) [MSC v.1900 64 bit (AMD64)]\nTensorflow version: 1.13.1\nKeras version: 2.2.4\n"},{"name":"stderr","output_type":"stream","text":"Using TensorFlow backend.\n"}],"source":"from ayx import Alteryx\nimport sys\nimport tensorflow as tf\nimport keras\n\nprint(f'Python version: {sys.version}')\nprint(f'Tensorflow version: {tf.__version__}')\nprint(f'Keras version: {keras.__version__}')"},{"cell_type":"code","execution_count":3,"metadata":{"trusted":true},"outputs":[],"source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport os \nfrom sklearn.preprocessing import MinMaxScaler"},{"cell_type":"code","execution_count":4,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"SUCCESS: reading input data \"#1\"\n"}],"source":"df = Alteryx.read(\"#1\")"},{"cell_type":"code","execution_count":5,"metadata":{"trusted":true},"outputs":[{"data":{"image/png":"\n","text/plain":"<Figure size 1296x648 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1962-01-02</td>\n      <td>0.751202</td>\n      <td>0.763722</td>\n      <td>0.743690</td>\n      <td>0.748698</td>\n      <td>0.001789</td>\n      <td>2156500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1962-01-03</td>\n      <td>0.744942</td>\n      <td>0.744942</td>\n      <td>0.738682</td>\n      <td>0.741186</td>\n      <td>0.001771</td>\n      <td>1477600</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1962-01-04</td>\n      <td>0.741186</td>\n      <td>0.747446</td>\n      <td>0.726162</td>\n      <td>0.732422</td>\n      <td>0.001750</td>\n      <td>1837100</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1962-01-05</td>\n      <td>0.732422</td>\n      <td>0.733674</td>\n      <td>0.701122</td>\n      <td>0.713642</td>\n      <td>0.001705</td>\n      <td>2725600</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1962-01-08</td>\n      <td>0.713642</td>\n      <td>0.713642</td>\n      <td>0.691106</td>\n      <td>0.712390</td>\n      <td>0.001702</td>\n      <td>3095000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Date      Open      High       Low     Close Adj Close   Volume\n0 1962-01-02  0.751202  0.763722  0.743690  0.748698  0.001789  2156500\n1 1962-01-03  0.744942  0.744942  0.738682  0.741186  0.001771  1477600\n2 1962-01-04  0.741186  0.747446  0.726162  0.732422  0.001750  1837100\n3 1962-01-05  0.732422  0.733674  0.701122  0.713642  0.001705  2725600\n4 1962-01-08  0.713642  0.713642  0.691106  0.712390  0.001702  3095000"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"# Sort DataFrame by date\ndf = df.sort_values('Date')\nplt.figure(figsize = (18,9))\nplt.plot(range(df.shape[0]),(df['Low']+df['High'])/2.0)\nplt.xticks(range(0,df.shape[0],500),df['Date'].loc[::500],rotation=45)\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Mid Price',fontsize=18)\nplt.show()\n\n# Double check the result\ndf.head()"},{"cell_type":"markdown","metadata":{},"source":"# Step 2 - Data preprocessing"},{"cell_type":"code","execution_count":6,"metadata":{"trusted":true},"outputs":[],"source":"df['mid'] = (df['Low']+df['High'])/2.0"},{"cell_type":"code","execution_count":7,"metadata":{"trusted":true},"outputs":[],"source":"SEQ_LEN = 60  # how long of a preceeding sequence to collect for RNN\nFUTURE_PERIOD_PREDICT = 1  # how far into the future are we trying to predict?\nRATIO_TO_PREDICT = \"mid\"\n"},{"cell_type":"code","execution_count":8,"metadata":{"trusted":true},"outputs":[],"source":"def classify(current, future):\n    if float(future) > float(current):\n        return 1\n    else:\n        return 0"},{"cell_type":"code","execution_count":9,"metadata":{"trusted":true},"outputs":[],"source":"df['future'] = df[RATIO_TO_PREDICT].shift(-FUTURE_PERIOD_PREDICT)\ndf['target'] = list(map(classify, df[RATIO_TO_PREDICT], df['future']))"},{"cell_type":"code","execution_count":10,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n      <th>mid</th>\n      <th>future</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1962-01-02</td>\n      <td>0.751202</td>\n      <td>0.763722</td>\n      <td>0.743690</td>\n      <td>0.748698</td>\n      <td>0.001789</td>\n      <td>2156500</td>\n      <td>0.753706</td>\n      <td>0.741812</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1962-01-03</td>\n      <td>0.744942</td>\n      <td>0.744942</td>\n      <td>0.738682</td>\n      <td>0.741186</td>\n      <td>0.001771</td>\n      <td>1477600</td>\n      <td>0.741812</td>\n      <td>0.736804</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1962-01-04</td>\n      <td>0.741186</td>\n      <td>0.747446</td>\n      <td>0.726162</td>\n      <td>0.732422</td>\n      <td>0.001750</td>\n      <td>1837100</td>\n      <td>0.736804</td>\n      <td>0.717398</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1962-01-05</td>\n      <td>0.732422</td>\n      <td>0.733674</td>\n      <td>0.701122</td>\n      <td>0.713642</td>\n      <td>0.001705</td>\n      <td>2725600</td>\n      <td>0.717398</td>\n      <td>0.702374</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1962-01-08</td>\n      <td>0.713642</td>\n      <td>0.713642</td>\n      <td>0.691106</td>\n      <td>0.712390</td>\n      <td>0.001702</td>\n      <td>3095000</td>\n      <td>0.702374</td>\n      <td>0.714894</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Date      Open      High       Low     Close Adj Close   Volume  \\\n0 1962-01-02  0.751202  0.763722  0.743690  0.748698  0.001789  2156500   \n1 1962-01-03  0.744942  0.744942  0.738682  0.741186  0.001771  1477600   \n2 1962-01-04  0.741186  0.747446  0.726162  0.732422  0.001750  1837100   \n3 1962-01-05  0.732422  0.733674  0.701122  0.713642  0.001705  2725600   \n4 1962-01-08  0.713642  0.713642  0.691106  0.712390  0.001702  3095000   \n\n        mid    future  target  \n0  0.753706  0.741812       0  \n1  0.741812  0.736804       0  \n2  0.736804  0.717398       0  \n3  0.717398  0.702374       0  \n4  0.702374  0.714894       1  "},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":"df.head()"},{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n      <th>mid</th>\n      <th>future</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>14434</th>\n      <td>2019-05-07</td>\n      <td>10.34</td>\n      <td>10.36</td>\n      <td>10.06</td>\n      <td>10.11</td>\n      <td>10.110000</td>\n      <td>56894200</td>\n      <td>10.210</td>\n      <td>10.165</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14435</th>\n      <td>2019-05-08</td>\n      <td>10.08</td>\n      <td>10.25</td>\n      <td>10.08</td>\n      <td>10.16</td>\n      <td>10.160000</td>\n      <td>47349300</td>\n      <td>10.165</td>\n      <td>10.115</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14436</th>\n      <td>2019-05-09</td>\n      <td>10.11</td>\n      <td>10.21</td>\n      <td>10.02</td>\n      <td>10.04</td>\n      <td>10.040000</td>\n      <td>59499800</td>\n      <td>10.115</td>\n      <td>9.975</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14437</th>\n      <td>2019-05-10</td>\n      <td>10.02</td>\n      <td>10.18</td>\n      <td>9.77</td>\n      <td>10.13</td>\n      <td>10.130000</td>\n      <td>63130200</td>\n      <td>9.975</td>\n      <td>9.945</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14438</th>\n      <td>2019-05-13</td>\n      <td>9.85</td>\n      <td>10.07</td>\n      <td>9.82</td>\n      <td>9.87</td>\n      <td>9.870000</td>\n      <td>60107400</td>\n      <td>9.945</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"            Date   Open   High    Low  Close  Adj Close    Volume     mid  \\\n14434 2019-05-07  10.34  10.36  10.06  10.11  10.110000  56894200  10.210   \n14435 2019-05-08  10.08  10.25  10.08  10.16  10.160000  47349300  10.165   \n14436 2019-05-09  10.11  10.21  10.02  10.04  10.040000  59499800  10.115   \n14437 2019-05-10  10.02  10.18   9.77  10.13  10.130000  63130200   9.975   \n14438 2019-05-13   9.85  10.07   9.82   9.87   9.870000  60107400   9.945   \n\n       future  target  \n14434  10.165       0  \n14435  10.115       0  \n14436   9.975       0  \n14437   9.945       0  \n14438     NaN       0  "},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"df.tail()"},{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[],"source":"times = sorted(df.index.values)  # get the times\nlast_10pct = sorted(df.index.values)[-int(0.1*len(times))]  # get the last 10% of the times\nlast_20pct = sorted(df.index.values)[-int(0.2*len(times))]  # get the last 20% of the times\n\ntest_df = df[(df.index >= last_10pct)]\nvalidation_df = df[(df.index >= last_20pct) & (df.index < last_10pct)]  \ntrain_df = df[(df.index < last_20pct)]  # now the train_df is all the data up to the last 20%"},{"cell_type":"code","execution_count":13,"metadata":{"trusted":true},"outputs":[],"source":"from collections import deque\nimport numpy as np\nimport random"},{"cell_type":"code","execution_count":14,"metadata":{"scrolled":true,"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\\pandas\\core\\frame.py:3940: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  errors=errors)\n"}],"source":"train_df.drop(columns=[\"Date\", \"future\", 'Open', 'High', 'Low', 'Close', 'Volume', \"Adj Close\"], inplace=True)\nvalidation_df.drop(columns=[\"Date\", \"future\", 'Open', 'High', 'Low', 'Close', 'Volume', \"Adj Close\"], inplace=True)\ntest_df.drop(columns=[\"Date\", \"future\", 'Open', 'High', 'Low', 'Close', 'Volume', \"Adj Close\"], inplace=True)# don't need this anymore."},{"cell_type":"code","execution_count":15,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mid</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.753706</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.741812</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.736804</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.717398</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.702374</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        mid  target\n0  0.753706       0\n1  0.741812       0\n2  0.736804       0\n3  0.717398       0\n4  0.702374       1"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"train_df.head()"},{"cell_type":"code","execution_count":21,"metadata":{"trusted":true},"outputs":[],"source":"train_data = train_df[RATIO_TO_PREDICT].values\nvalid_data = validation_df[RATIO_TO_PREDICT].values\ntest_data = test_df[RATIO_TO_PREDICT].values"},{"cell_type":"code","execution_count":25,"metadata":{"trusted":true},"outputs":[],"source":"train_data = train_data.reshape(-1,1)\nvalid_data = valid_data.reshape(-1,1)\ntest_data = test_data.reshape(-1,1)"},{"cell_type":"code","execution_count":26,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"array([[ 0.75370601],\n       [ 0.74181199],\n       [ 0.73680401],\n       ...,\n       [36.79807663],\n       [36.78365326],\n       [36.59134674]])"},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":"train_data"},{"cell_type":"code","execution_count":27,"metadata":{"trusted":true},"outputs":[],"source":"scaler = MinMaxScaler()# Train the Scaler with training data and smooth data\nsmoothing_window_size = 2500\nfor di in range(0,10000,smoothing_window_size):\n    scaler.fit(train_data[di:di+smoothing_window_size,:])\n    train_data[di:di+smoothing_window_size,:] = scaler.transform(train_data[di:di+smoothing_window_size,:])\n\n# You normalize the last bit of remaining data\nscaler.fit(train_data[di+smoothing_window_size:,:])\ntrain_data[di+smoothing_window_size:,:] = scaler.transform(train_data[di+smoothing_window_size:,:])"},{"cell_type":"code","execution_count":28,"metadata":{"trusted":true},"outputs":[],"source":"# Reshape both train and test data\ntrain_data = train_data.reshape(-1)\n\n# Normalize test data and validation data\nvalid_data = scaler.transform(valid_data).reshape(-1)\ntest_data = scaler.transform(test_data).reshape(-1)"},{"cell_type":"code","execution_count":29,"metadata":{"trusted":true},"outputs":[],"source":"# Now perform exponential moving average smoothing\n# So the data will have a smoother curve than the original ragged data\nEMA = 0.0\ngamma = 0.1\nfor ti in range(11000):\n    EMA = gamma*train_data[ti] + (1-gamma)*EMA\n    train_data[ti] = EMA\n\n# Used for visualization and test purposes\nall_mid_data = np.concatenate([train_data,valid_data, test_data],axis=0)"},{"cell_type":"code","execution_count":35,"metadata":{"trusted":true},"outputs":[],"source":"X_train = []\ny_train = []\nfor i in range(SEQ_LEN, len(train_data)):\n    X_train.append(train_data[i-SEQ_LEN:i])\n    y_train.append(train_data[i + (FUTURE_PERIOD_PREDICT-1)])\nX_train, y_train = np.array(X_train), np.array(y_train)\n\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))"},{"cell_type":"code","execution_count":36,"metadata":{"trusted":true},"outputs":[],"source":"X_valid = []\ny_valid = []\nfor i in range(SEQ_LEN, len(valid_data)):\n    X_valid.append(valid_data[i-SEQ_LEN:i])\n    y_valid.append(valid_data[i+(FUTURE_PERIOD_PREDICT-1)])\nX_valid, y_valid = np.array(X_valid), np.array(y_valid)\n\nX_valid = np.reshape(X_valid, (X_valid.shape[0], X_valid.shape[1], 1))"},{"cell_type":"code","execution_count":37,"metadata":{"trusted":true},"outputs":[],"source":"X_test = []\ny_test = []\nfor i in range(SEQ_LEN, len(test_data)):\n    X_test.append(test_data[i-SEQ_LEN:i])\n    y_test.append(test_data[i+(FUTURE_PERIOD_PREDICT-1)])\n    \nX_test, y_test = np.array(X_test), np.array(y_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))"},{"cell_type":"code","execution_count":39,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"(11492,)"},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":"y_train.shape"},{"cell_type":"code","execution_count":40,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"(1384,)"},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":"y_valid.shape"},{"cell_type":"code","execution_count":41,"metadata":{"trusted":true},"outputs":[],"source":"X_train_2 = []\ny_train_2 = []\nfor i in range(SEQ_LEN, len(train_data)):\n    X_train_2.append(train_data[i-SEQ_LEN:i])\n    y_train_2.append(train_data[i + (FUTURE_PERIOD_PREDICT-1)])\nX_train_2, y_train_2 = np.array(X_train_2), np.array(y_train_2)\n\nX_train_2 = np.reshape(X_train_2, (X_train_2.shape[0], X_train_2.shape[1], 1))"},{"cell_type":"code","execution_count":42,"metadata":{"trusted":true},"outputs":[{"data":{"image/png":"\n","text/plain":"<Figure size 1080x360 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":"## show predictions\nplt.figure(figsize=(15, 5))\n\nplt.plot(np.arange(y_train_2.shape[0]), y_train_2, color='blue', label='train target')\n\nplt.plot(np.arange(y_train_2.shape[0], y_train_2.shape[0]+y_valid.shape[0]), y_valid,\n         color='gray', label='valid target')\n\nplt.plot(np.arange(y_train_2.shape[0]+y_valid.shape[0],\n                   y_train_2.shape[0]+y_valid.shape[0]+y_test.shape[0]),\n         y_test, color='black', label='test target')\n\n\nplt.title('Séparation des données')\nplt.xlabel('time [days]')\nplt.ylabel('normalized price')\nplt.legend(loc='best');"},{"cell_type":"code","execution_count":43,"metadata":{"trusted":true},"outputs":[],"source":"from sklearn.utils import shuffle\nX_train, y_train = shuffle(X_train, y_train)"},{"cell_type":"code","execution_count":44,"metadata":{"trusted":true},"outputs":[],"source":"EPOCHS = 10  # how many passes through our data\nBATCH_SIZE = 1024  # how many batches? Try smaller batch if you're getting OOM (out of memory) errors.\nimport time\n\nNAME = f\"{SEQ_LEN}-SEQ-{FUTURE_PERIOD_PREDICT}-PRED-{int(time.time())}\"  # a unique name for the model"},{"cell_type":"markdown","metadata":{},"source":"# Step 3 - Build our model (The Transformer)"},{"cell_type":"code","execution_count":46,"metadata":{"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"  WARNING: The script f2py.exe is installed in 'C:\\Users\\paulj\\AppData\\Roaming\\Python\\Python36\\Scripts' which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n  WARNING: The script tensorboard.exe is installed in 'C:\\Users\\paulj\\AppData\\Roaming\\Python\\Python36\\Scripts' which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n  WARNING: The scripts freeze_graph.exe, saved_model_cli.exe, tensorboard.exe, tf_upgrade_v2.exe, tflite_convert.exe, toco.exe and toco_from_protos.exe are installed in 'C:\\Users\\paulj\\AppData\\Roaming\\Python\\Python36\\Scripts' which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n"}],"source":"!pip install -q tensorflow==2.0.0-alpha0 --user"},{"cell_type":"code","execution_count":54,"metadata":{"trusted":true},"outputs":[],"source":"# https://www.kaggle.com/shujian/transformer-with-lstm\n\nimport random, os, sys\nimport numpy as np\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.initializers import *\nimport tensorflow as tf\nfrom tensorflow.python.keras.layers import Layer\nfrom keras import backend as K\n\ntry:\n    from dataloader import TokenList, pad_to_longest\n    # for transformer\nexcept: pass\n\n\n\nembed_size = 60\n\nclass LayerNormalization(Layer):\n    def __init__(self, eps=1e-6, **kwargs):\n        self.eps = eps\n        super(LayerNormalization, self).__init__(**kwargs)\n    def build(self, input_shape):\n        self.gamma = self.add_weight(name='gamma', shape=input_shape[-1:],\n                                     initializer=Ones(), trainable=True)\n        self.beta = self.add_weight(name='beta', shape=input_shape[-1:],\n                                    initializer=Zeros(), trainable=True)\n        super(LayerNormalization, self).build(input_shape)\n    def call(self, x):\n        mean = K.mean(x, axis=-1, keepdims=True)\n        std = K.std(x, axis=-1, keepdims=True)\n        return self.gamma * (x - mean) / (std + self.eps) + self.beta\n    def compute_output_shape(self, input_shape):\n        return input_shape\n\nclass ScaledDotProductAttention():\n    def __init__(self, d_model, attn_dropout=0.1):\n        self.temper = np.sqrt(d_model)\n        self.dropout = Dropout(attn_dropout)\n    def __call__(self, q, k, v, mask):\n        attn = Lambda(lambda x:K.batch_dot(x[0],x[1],axes=[2,2])/self.temper)([q, k])\n        if mask is not None:\n            mmask = Lambda(lambda x:(-1e+10)*(1-x))(mask)\n            attn = Add()([attn, mmask])\n        attn = Activation('softmax')(attn)\n        attn = self.dropout(attn)\n        output = Lambda(lambda x:K.batch_dot(x[0], x[1]))([attn, v])\n        return output, attn\n\nclass MultiHeadAttention():\n    # mode 0 - big martixes, faster; mode 1 - more clear implementation\n    def __init__(self, n_head, d_model, d_k, d_v, dropout, mode=0, use_norm=True):\n        self.mode = mode\n        self.n_head = n_head\n        self.d_k = d_k\n        self.d_v = d_v\n        self.dropout = dropout\n        if mode == 0:\n            self.qs_layer = Dense(n_head*d_k, use_bias=False)\n            self.ks_layer = Dense(n_head*d_k, use_bias=False)\n            self.vs_layer = Dense(n_head*d_v, use_bias=False)\n        elif mode == 1:\n            self.qs_layers = []\n            self.ks_layers = []\n            self.vs_layers = []\n            for _ in range(n_head):\n                self.qs_layers.append(TimeDistributed(Dense(d_k, use_bias=False)))\n                self.ks_layers.append(TimeDistributed(Dense(d_k, use_bias=False)))\n                self.vs_layers.append(TimeDistributed(Dense(d_v, use_bias=False)))\n        self.attention = ScaledDotProductAttention(d_model)\n        self.layer_norm = LayerNormalization() if use_norm else None\n        self.w_o = TimeDistributed(Dense(d_model))\n\n    def __call__(self, q, k, v, mask=None):\n        d_k, d_v = self.d_k, self.d_v\n        n_head = self.n_head\n\n        if self.mode == 0:\n            qs = self.qs_layer(q)  # [batch_size, len_q, n_head*d_k]\n            ks = self.ks_layer(k)\n            vs = self.vs_layer(v)\n\n            def reshape1(x):\n                s = tf.shape(x)   # [batch_size, len_q, n_head * d_k]\n                x = tf.reshape(x, [s[0], s[1], n_head, d_k])\n                x = tf.transpose(x, [2, 0, 1, 3])  \n                x = tf.reshape(x, [-1, s[1], d_k])  # [n_head * batch_size, len_q, d_k]\n                return x\n            qs = Lambda(reshape1)(qs)\n            ks = Lambda(reshape1)(ks)\n            vs = Lambda(reshape1)(vs)\n\n            if mask is not None:\n                mask = Lambda(lambda x:K.repeat_elements(x, n_head, 0))(mask)\n            head, attn = self.attention(qs, ks, vs, mask=mask)  \n                \n            def reshape2(x):\n                s = tf.shape(x)   # [n_head * batch_size, len_v, d_v]\n                x = tf.reshape(x, [n_head, -1, s[1], s[2]]) \n                x = tf.transpose(x, [1, 2, 0, 3])\n                x = tf.reshape(x, [-1, s[1], n_head*d_v])  # [batch_size, len_v, n_head * d_v]\n                return x\n            head = Lambda(reshape2)(head)\n        elif self.mode == 1:\n            heads = []; attns = []\n            for i in range(n_head):\n                qs = self.qs_layers[i](q)   \n                ks = self.ks_layers[i](k) \n                vs = self.vs_layers[i](v) \n                head, attn = self.attention(qs, ks, vs, mask)\n                heads.append(head); attns.append(attn)\n            head = Concatenate()(heads) if n_head > 1 else heads[0]\n            attn = Concatenate()(attns) if n_head > 1 else attns[0]\n\n        outputs = self.w_o(head)\n        outputs = Dropout(self.dropout)(outputs)\n        if not self.layer_norm: return outputs, attn\n        # outputs = Add()([outputs, q]) # sl: fix\n        return self.layer_norm(outputs), attn\n\nclass PositionwiseFeedForward():\n    def __init__(self, d_hid, d_inner_hid, dropout=0.1):\n        self.w_1 = Conv1D(d_inner_hid, 1, activation='relu')\n        self.w_2 = Conv1D(d_hid, 1)\n        self.layer_norm = LayerNormalization()\n        self.dropout = Dropout(dropout)\n    def __call__(self, x):\n        output = self.w_1(x) \n        output = self.w_2(output)\n        output = self.dropout(output)\n        output = Add()([output, x])\n        return self.layer_norm(output)\n\nclass EncoderLayer():\n    def __init__(self, d_model, d_inner_hid, n_head, d_k, d_v, dropout=0.1):\n        self.self_att_layer = MultiHeadAttention(n_head, d_model, d_k, d_v, dropout=dropout)\n        self.pos_ffn_layer  = PositionwiseFeedForward(d_model, d_inner_hid, dropout=dropout)\n    def __call__(self, enc_input, mask=None):\n        output, slf_attn = self.self_att_layer(enc_input, enc_input, enc_input, mask=mask)\n        output = self.pos_ffn_layer(output)\n        return output, slf_attn\n\n\ndef GetPosEncodingMatrix(max_len, d_emb):\n    pos_enc = np.array([\n        [pos / np.power(10000, 2 * (j // 2) / d_emb) for j in range(d_emb)] \n        if pos != 0 else np.zeros(d_emb) \n            for pos in range(max_len)\n            ])\n    pos_enc[1:, 0::2] = np.sin(pos_enc[1:, 0::2]) # dim 2i\n    pos_enc[1:, 1::2] = np.cos(pos_enc[1:, 1::2]) # dim 2i+1\n    return pos_enc\n\ndef GetPadMask(q, k):\n    ones = K.expand_dims(K.ones_like(q, 'float32'), -1)\n    mask = K.cast(K.expand_dims(K.not_equal(k, 0), 1), 'float32')\n    mask = K.batch_dot(ones, mask, axes=[2,1])\n    return mask\n\ndef GetSubMask(s):\n    len_s = tf.shape(s)[1]\n    bs = tf.shape(s)[:1]\n    mask = K.cumsum(tf.eye(len_s, batch_shape=bs), 1)\n    return mask\n\nclass Transformer():\n    def __init__(self, len_limit, embedding_matrix, d_model=embed_size, \\\n              d_inner_hid=512, n_head=10, d_k=64, d_v=64, layers=2, dropout=0.1, \\\n              share_word_emb=False, **kwargs):\n        self.name = 'Transformer'\n        self.len_limit = len_limit\n        self.src_loc_info = False # True # sl: fix later\n        self.d_model = d_model\n        self.decode_model = None\n        d_emb = d_model\n\n        pos_emb = Embedding(len_limit, d_emb, trainable=False, \\\n                            weights=[GetPosEncodingMatrix(len_limit, d_emb)])\n\n        i_word_emb = Embedding(max_features, d_emb, weights=[embedding_matrix]) # Add Kaggle provided embedding here\n\n        self.encoder = Encoder(d_model, d_inner_hid, n_head, d_k, d_v, layers, dropout, \\\n                               word_emb=i_word_emb, pos_emb=pos_emb)\n\n        \n    def get_pos_seq(self, x):\n        mask = K.cast(K.not_equal(x, 0), 'int32')\n        pos = K.cumsum(K.ones_like(x, 'int32'), 1)\n        return pos * mask\n\n    def compile(self, active_layers=999):\n        src_seq_input = Input(shape=(None, ))\n        x = Embedding(max_features, embed_size, weights=[embedding_matrix])(src_seq_input)\n        \n        # LSTM before attention layers\n        x = Bidirectional(LSTM(128, return_sequences=True))(x)\n        x = Bidirectional(LSTM(64, return_sequences=True))(x) \n        \n        x, slf_attn = MultiHeadAttention(n_head=3, d_model=300, d_k=64, d_v=64, dropout=0.1)(x, x, x)\n        \n        avg_pool = GlobalAveragePooling1D()(x)\n        max_pool = GlobalMaxPooling1D()(x)\n        conc = concatenate([avg_pool, max_pool])\n        conc = Dense(64, activation=\"relu\")(conc)\n        x = Dense(1, activation=\"sigmoid\")(conc)   \n        \n        \n        self.model = Model(inputs=src_seq_input, outputs=x)\n        self.model.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])"},{"cell_type":"code","execution_count":55,"metadata":{"trusted":true},"outputs":[],"source":"def build_model():\n    inp = Input(shape = (SEQ_LEN, 1))\n    \n    # LSTM before attention layers\n    x = Bidirectional(LSTM(128, return_sequences=True))(inp)\n    x = Bidirectional(LSTM(64, return_sequences=True))(x) \n        \n    x, slf_attn = MultiHeadAttention(n_head=3, d_model=300, d_k=64, d_v=64, dropout=0.1)(x, x, x)\n        \n    avg_pool = GlobalAveragePooling1D()(x)\n    max_pool = GlobalMaxPooling1D()(x)\n    conc = concatenate([avg_pool, max_pool])\n    conc = Dense(64, activation=\"relu\")(conc)\n    x = Dense(1, activation=\"sigmoid\")(conc)      \n\n    model = Model(inputs = inp, outputs = x)\n    model.compile(\n        loss = \"mean_squared_error\", \n        #optimizer = Adam(lr = config[\"lr\"], decay = config[\"lr_d\"]), \n        optimizer = \"adam\")\n    \n    # Save entire model to a HDF5 file\n    #model.save('my_model.h5')\n    \n    return model"},{"cell_type":"code","execution_count":56,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"WARNING:tensorflow:From c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\core.py:143: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\nInstructions for updating:\nPlease use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\nWARNING:tensorflow:From c:\\users\\paulj\\appdata\\local\\alteryx\\bin\\miniconda3\\pythontool_venv\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\losses_utils.py:170: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.cast instead.\n"}],"source":"multi_head = build_model()"},{"cell_type":"code","execution_count":57,"metadata":{"scrolled":true,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to                     \n==================================================================================================\ninput_2 (InputLayer)            (None, 60, 1)        0                                            \n__________________________________________________________________________________________________\nbidirectional_2 (Bidirectional) (None, 60, 256)      133120      input_2[0][0]                    \n__________________________________________________________________________________________________\nbidirectional_3 (Bidirectional) (None, 60, 128)      164352      bidirectional_2[0][0]            \n__________________________________________________________________________________________________\ndense_4 (Dense)                 (None, 60, 192)      24576       bidirectional_3[0][0]            \n__________________________________________________________________________________________________\ndense_5 (Dense)                 (None, 60, 192)      24576       bidirectional_3[0][0]            \n__________________________________________________________________________________________________\nlambda_4 (Lambda)               (None, None, 64)     0           dense_4[0][0]                    \n__________________________________________________________________________________________________\nlambda_5 (Lambda)               (None, None, 64)     0           dense_5[0][0]                    \n__________________________________________________________________________________________________\nlambda_7 (Lambda)               (None, None, None)   0           lambda_4[0][0]                   \n                                                                 lambda_5[0][0]                   \n__________________________________________________________________________________________________\nactivation (Activation)         (None, None, None)   0           lambda_7[0][0]                   \n__________________________________________________________________________________________________\ndense_6 (Dense)                 (None, 60, 192)      24576       bidirectional_3[0][0]            \n__________________________________________________________________________________________________\ndropout_1 (Dropout)             (None, None, None)   0           activation[0][0]                 \n__________________________________________________________________________________________________\nlambda_6 (Lambda)               (None, None, 64)     0           dense_6[0][0]                    \n__________________________________________________________________________________________________\nlambda_8 (Lambda)               (None, None, 64)     0           dropout_1[0][0]                  \n                                                                 lambda_6[0][0]                   \n__________________________________________________________________________________________________\nlambda_9 (Lambda)               (None, None, 192)    0           lambda_8[0][0]                   \n__________________________________________________________________________________________________\ntime_distributed_1 (TimeDistrib (None, None, 300)    57900       lambda_9[0][0]                   \n__________________________________________________________________________________________________\ndropout_2 (Dropout)             (None, None, 300)    0           time_distributed_1[0][0]         \n__________________________________________________________________________________________________\nlayer_normalization_1 (LayerNor (None, None, 300)    600         dropout_2[0][0]                  \n__________________________________________________________________________________________________\nglobal_average_pooling1d (Globa (None, 300)          0           layer_normalization_1[0][0]      \n__________________________________________________________________________________________________\nglobal_max_pooling1d (GlobalMax (None, 300)          0           layer_normalization_1[0][0]      \n__________________________________________________________________________________________________\nconcatenate (Concatenate)       (None, 600)          0           global_average_pooling1d[0][0]   \n                                                                 global_max_pooling1d[0][0]       \n__________________________________________________________________________________________________\ndense_8 (Dense)                 (None, 64)           38464       concatenate[0][0]                \n__________________________________________________________________________________________________\ndense_9 (Dense)                 (None, 1)            65          dense_8[0][0]                    \n==================================================================================================\nTotal params: 468,229\nTrainable params: 468,229\nNon-trainable params: 0\n__________________________________________________________________________________________________\n"}],"source":"multi_head.summary()predicted_stock_price_multi_head = multi_head.predict(X_test)\n#predicted_stock_price = scaler.inverse_transform(predicted_stock_price)\n\n\npredicted_stock_price_multi_head.shape"},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":"multi_head.fit(X_train, y_train,\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_data=(X_valid, y_valid), \n                    #callbacks = [checkpoint , lr_reduce]\n             )"},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":"predicted_stock_price_multi_head = multi_head.predict(X_test)\n#predicted_stock_price = scaler.inverse_transform(predicted_stock_price)\n\n\npredicted_stock_price_multi_head.shape"},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":"predicted_stock_price_multi_head = np.vstack((np.full((60,1), np.nan), predicted_stock_price_multi_head))"},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":"plt.figure(figsize = (18,9))\nplt.plot(test_data, color = 'black', label = 'GE Stock Price')\nplt.plot(predicted_stock_price_multi_head, color = 'green', label = 'Predicted GE Mid Price')\nplt.title('GE Mid Price Prediction', fontsize=30)\n#plt.xticks(range(0,df.shape[0],50),df['Date'].loc[::50],rotation=45)\nplt.xlabel('Date')\nplt.ylabel('GE Mid Price')\nplt.legend(fontsize=18)\nplt.show()"}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.0"}},"nbformat":4,"nbformat_minor":2}]]></Notebook>
          <Port>51183</Port>
          <WorkflowName>c:\users\paulj\onedrive\documents\github\trading\alteryx\2-rnn_training.yxmd</WorkflowName>
          <specialCellMetadata>[{"label":"info","contents_keyword":"Alteryx.help()","cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","first_line":"Run `Alteryx.help()` for info about useful functions.","cell_type":"markdown","cell_class":"text_cell"},{"label":"deps","contents_keyword":"installPackages","cell_css":"border: 1px solid #58a; margin: 2px;","first_line":"# List all non-standard packages to be imported by your","cell_type":"code","cell_class":"code_cell"}]</specialCellMetadata>
          <AssetManaged>True</AssetManaged>
          <JupyterProduction>False</JupyterProduction>
          <SqliteOverride>false</SqliteOverride>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxJupyterPluginEngine.dll" EngineDllEntryPoint="AlteryxJupyter" />
    </Node>
    <Node ToolID="5">
      <GuiSettings Plugin="AlteryxBasePluginsGui.DynamicRename.DynamicRename">
        <Position x="366" y="150" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <RenameMode>Formula</RenameMode>
          <Fields orderChanged="False">
            <Field name="Date" />
            <Field name="Open" />
            <Field name="High" />
            <Field name="Low" />
            <Field name="Close" />
            <Field name="Adj Close" />
            <Field name="Volume" />
            <Field name="*Unknown" />
          </Fields>
          <Expression><![CDATA[titlecase([_CurrentField_])
]]></Expression>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="Date" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Date" />
            <Field name="Open" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Float" />
            <Field name="High" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Float" />
            <Field name="Low" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Float" />
            <Field name="Close" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Float" />
            <Field name="Adj Close" size="254" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="V_WString" />
            <Field name="Volume" source="File: C:\Users\paulj\OneDrive\Documents\Github\trading\data\1-raw\GE.csv" type="Int32" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxDynamicRename" />
    </Node>
  </Nodes>
  <Connections>
    <Connection>
      <Origin ToolID="2" Connection="Output" />
      <Destination ToolID="4" Connection="Input" />
    </Connection>
    <Connection>
      <Origin ToolID="4" Connection="Output" />
      <Destination ToolID="5" Connection="Targets" />
    </Connection>
    <Connection name="#1">
      <Origin ToolID="5" Connection="Output" />
      <Destination ToolID="1" Connection="Input" />
    </Connection>
  </Connections>
  <Properties>
    <Memory default="True" />
    <GlobalRecordLimit value="0" />
    <TempFiles default="True" />
    <Annotation on="True" includeToolName="False" />
    <ConvErrorLimit value="10" />
    <ConvErrorLimit_Stop value="False" />
    <CancelOnError value="False" />
    <DisableBrowse value="False" />
    <EnablePerformanceProfiling value="False" />
    <DisableAllOutput value="False" />
    <ShowAllMacroMessages value="False" />
    <ShowConnectionStatusIsOn value="True" />
    <ShowConnectionStatusOnlyWhenRunning value="True" />
    <ZoomLevel value="0" />
    <LayoutType>Horizontal</LayoutType>
    <MetaInfo>
      <NameIsFileName value="True" />
      <Name>2-rnn_training</Name>
      <Description />
      <RootToolName />
      <ToolVersion />
      <ToolInDb value="False" />
      <CategoryName />
      <SearchTags />
      <Author />
      <Company />
      <Copyright />
      <DescriptionLink actual="" displayed="" />
      <Example>
        <Description />
        <File />
      </Example>
    </MetaInfo>
    <Events>
      <Enabled value="True" />
    </Events>
  </Properties>
</AlteryxDocument>